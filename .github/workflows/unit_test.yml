name: Tests

on:
  workflow_dispatch:
  merge_group:
  pull_request:
    types: [labeled]
  schedule:
    - cron: '0 0 1 * *'

env:
  IBMQ_TOKEN: ${{ secrets.IBMQ_TOKEN }}
  QIBO_CLIENT_TOKEN: ${{ secrets.QIBO_CLIENT_TOKEN }}
  IONQ_TOKEN: ${{ secrets.IONQ_TOKEN }}

jobs:
  build:
    if: github.event.schedule == '0 0 1 * *' || contains(github.event.pull_request.labels.*.name, 'run-workflow') || github.event_name == 'push'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.9, "3.10", "3.11"]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install and configure poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-pip-wheels
        uses: actions/cache@v3
        with:
          path: ~/.cache
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install project
        run: poetry install --no-interaction --with tests
      - name: Install task runner
        run: pip install poethepoet
      - name: Lint
        run: |
          source $VENV
          poe lint
          poe lint-warnings
      - name: Test
        run: |
          source $VENV
          poe test
      - name: Upload coverage to Codecov
        if: startsWith(runner.os, 'Linux')
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: unit-tests
          fail_ci_if_error: true
          token: ${{ secrets.codecov_token }}
